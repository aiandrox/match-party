rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ルームコレクションのルール
    match /rooms/{roomId} {
      allow read: if true;
      allow create: if isValidRoomCreation();
      allow update: if isValidRoomUpdate();
      allow delete: if false;
    }
    
    // ゲームラウンドコレクションのルール
    match /gameRounds/{gameRoundId} {
      allow read: if true;
      allow create: if isValidGameRoundCreation();
      allow update: if isValidGameRoundUpdate();
      allow delete: if false;
    }
    
    // 回答コレクションのルール
    match /gameAnswers/{answerId} {
      allow read: if true;
      allow create: if isValidAnswerCreation();
      allow update: if false;
      allow delete: if false;
    }
    
    // ユーザーコレクションのルール
    match /users/{userId} {
      allow read: if true;
      allow create: if isValidUserCreation();
      allow update: if isValidUserUpdate();
      allow delete: if false;
    }
    
    // その他のコレクションへのアクセス禁止
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // 状態遷移バリデーション関数
  function isValidRoomStatusTransition(fromStatus, toStatus) {
    return (fromStatus == 'waiting' && toStatus in ['waiting', 'playing']) ||
           (fromStatus == 'playing' && toStatus in ['playing', 'revealing']) ||
           (fromStatus == 'revealing' && toStatus in ['revealing', 'playing', 'ended']) ||
           (fromStatus == 'ended' && toStatus == 'ended');
  }
  
  function isValidGameRoundStatusTransition(fromStatus, toStatus) {
    return (fromStatus == 'active' && toStatus in ['active', 'completed']) ||
           (fromStatus == 'completed' && toStatus == 'completed');
  }
  
  // バリデーション関数
  function isValidRoomCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['code', 'status', 'participants', 'createdAt', 'expiresAt']) &&
           data.keys().hasOnly(['code', 'status', 'participants', 'createdAt', 'expiresAt']) &&
           // ルームコードは20文字の英数字
           data.code is string &&
           data.code.size() == 20 &&
           data.code.matches('^[A-Z0-9]{20}$') &&
           // 作成時は必ずwaiting状態
           data.status == 'waiting' &&
           // 作成時は参加者リストが空
           data.participants is list &&
           data.participants.size() == 0 &&
           // タイムスタンプの合理性チェック
           data.createdAt is timestamp &&
           data.expiresAt is timestamp &&
           data.expiresAt > data.createdAt &&
           // 有効期限は作成時刻から30分後（1800秒）
           data.expiresAt.toMillis() - data.createdAt.toMillis() == 1800000 &&
           // 作成時はcurrentGameRoundIdは存在しない
           !data.keys().hasAny(['currentGameRoundId']);
  }
  
  function isValidRoomUpdate() {
    let data = request.resource.data;
    let existing = resource.data;
    return data.keys().hasAll(['code', 'status', 'participants', 'createdAt', 'expiresAt']) &&
           data.keys().hasOnly(['code', 'status', 'participants', 'createdAt', 'expiresAt', 'currentGameRoundId']) &&
           // 不変フィールドの保護
           data.code == existing.code &&
           data.createdAt == existing.createdAt &&
           data.expiresAt == existing.expiresAt &&
           // 状態遷移の制約
           isValidRoomStatusTransition(existing.status, data.status) &&
           data.participants is list &&
           data.participants.size() <= 20 && // MAX_PARTICIPANTS
           // 参加者数は減少しない（退出機能がないため）
           data.participants.size() >= existing.participants.size() &&
           // participantsの各要素の基本チェック
           data.participants.size() == 0 || 
           (data.participants[0].keys().hasAll(['id', 'name', 'isHost']) && 
            data.participants[0].id is string &&
            data.participants[0].name is string &&
            data.participants[0].isHost is bool) &&
           (!data.keys().hasAny(['currentGameRoundId']) || 
            (data.currentGameRoundId is string && data.currentGameRoundId.size() > 0));
  }
  
  function isValidGameRoundCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['roomId', 'topicContent', 'roundNumber', 'status', 'createdAt']) &&
           data.keys().hasOnly(['roomId', 'topicContent', 'roundNumber', 'status', 'createdAt']) &&
           data.roomId is string &&
           data.roomId.size() > 0 &&
           data.topicContent is string &&
           data.topicContent.size() >= 1 &&
           data.topicContent.size() <= 100 &&
           data.roundNumber is number &&
           data.roundNumber >= 1 &&
           data.roundNumber <= 100 &&
           // 作成時は必ずactive状態
           data.status == 'active' &&
           data.createdAt is timestamp &&
           // 作成時はjudgmentフィールドは存在しない
           !data.keys().hasAny(['judgment']);
  }
  
  function isValidGameRoundUpdate() {
    let data = request.resource.data;
    let existing = resource.data;
    return // 不変フィールドの保護
           data.roomId == existing.roomId &&
           data.roundNumber == existing.roundNumber &&
           data.createdAt == existing.createdAt &&
           data.topicContent == existing.topicContent &&
           // 状態遷移の制約（active → completed のみ許可）
           isValidGameRoundStatusTransition(existing.status, data.status) &&
           // judgmentは active → completed 時のみ追加可能
           (existing.status == 'active' && data.status == 'completed' && 
            data.judgment is string && data.judgment in ['match', 'no-match']) ||
           (existing.status == 'completed' && data.status == 'completed' &&
            data.judgment == existing.judgment);
  }
  
  function isValidAnswerCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['gameRoundId', 'userId', 'userName', 'content', 'submittedAt']) &&
           data.keys().hasOnly(['gameRoundId', 'userId', 'userName', 'content', 'submittedAt', 'createdAt']) &&
           data.gameRoundId is string &&
           data.gameRoundId.size() > 0 &&
           data.userId is string &&
           data.userId.size() > 0 &&
           data.userName is string &&
           data.userName.size() >= 2 &&
           data.userName.size() <= 20 &&
           data.userName.matches('^[a-zA-Z0-9ａ-ｚＡ-Ｚ０-９ぁ-んァ-ヶｱ-ﾝﾞﾟ一-龠ー]+$') &&
           data.content is string &&
           data.content.size() >= 1 &&
           data.content.size() <= 100 &&
           data.submittedAt is timestamp &&
           // createdAtとsubmittedAtは同一でなければならない
           (!data.keys().hasAny(['createdAt']) || data.createdAt == data.submittedAt);
  }
  
  function isValidUserCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.keys().hasOnly(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.name is string &&
           data.name.size() >= 2 &&
           data.name.size() <= 20 &&
           data.name.matches('^[a-zA-Z0-9ａ-ｚＡ-Ｚ０-９ぁ-んァ-ヶｱ-ﾝﾞﾟ一-龠ー]+$') &&
           data.isHost is bool &&
           data.roomId is string &&
           data.roomId.size() > 0 &&
           data.joinedAt is timestamp &&
           // 作成時は常にfalse（準備状態・回答状態は初期化）
           data.isReady == false &&
           data.hasAnswered == false;
  }
  
  function isValidUserUpdate() {
    let data = request.resource.data;
    let existing = resource.data;
    return data.keys().hasAll(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.keys().hasOnly(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           // 不変フィールドの保護
           data.name == existing.name &&
           data.isHost == existing.isHost &&
           data.roomId == existing.roomId &&
           data.joinedAt == existing.joinedAt &&
           // 状態フィールドのみ更新可能
           data.isReady is bool &&
           data.hasAnswered is bool &&
           // hasAnsweredは false → true の一方向のみ許可（リセットはゲーム終了時のみ）
           (data.hasAnswered == existing.hasAnswered || 
            (existing.hasAnswered == false && data.hasAnswered == true));
  }
}