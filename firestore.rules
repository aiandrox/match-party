rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ルームコレクションのルール
    match /rooms/{roomId} {
      allow read: if true;
      allow create: if isValidRoomCreation();
      allow update: if isValidRoomUpdate();
      allow delete: if false;
    }
    
    // ゲームラウンドコレクションのルール
    match /gameRounds/{gameRoundId} {
      allow read: if true;
      allow create: if isValidGameRoundCreation();
      allow update: if isValidGameRoundUpdate();
      allow delete: if false;
    }
    
    // 回答コレクションのルール
    match /gameAnswers/{answerId} {
      allow read: if true;
      allow create: if isValidAnswerCreation();
      allow update: if false;
      allow delete: if false;
    }
    
    // ユーザーコレクションのルール
    match /users/{userId} {
      allow read: if true;
      allow create: if isValidUserCreation();
      allow update: if isValidUserUpdate();
      allow delete: if false;
    }
    
    // その他のコレクションへのアクセス禁止
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // バリデーション関数
  function isValidRoomCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['code', 'hostId', 'status', 'participants', 'createdAt', 'expiresAt']) &&
           data.keys().hasOnly(['code', 'hostId', 'status', 'participants', 'createdAt', 'expiresAt', 'currentGameRoundId']) &&
           data.code is string &&
           data.code.size() == 20 &&
           data.code.matches('^[a-zA-Z0-9]+$') &&
           data.hostId is string &&
           data.hostId.size() > 0 &&
           data.status in ['waiting', 'playing', 'revealing', 'ended'] &&
           data.participants is list &&
           data.participants.size() <= 20 && // MAX_PARTICIPANTS
           data.createdAt is timestamp &&
           data.expiresAt is timestamp &&
           data.expiresAt > data.createdAt &&
           // currentGameRoundIdがある場合の検証
           (!data.keys().hasAny(['currentGameRoundId']) || 
            (data.currentGameRoundId is string && data.currentGameRoundId.size() > 0));
  }
  
  function isValidRoomUpdate() {
    let data = request.resource.data;
    let existing = resource.data;
    return data.keys().hasAll(['code', 'hostId', 'status', 'participants', 'createdAt', 'expiresAt']) &&
           data.keys().hasOnly(['code', 'hostId', 'status', 'participants', 'createdAt', 'expiresAt', 'currentGameRoundId']) &&
           data.code == existing.code &&
           data.hostId == existing.hostId &&
           data.createdAt == existing.createdAt &&
           data.expiresAt == existing.expiresAt &&
           data.status in ['waiting', 'playing', 'revealing', 'ended'] &&
           data.participants is list &&
           data.participants.size() <= 20 && // MAX_PARTICIPANTS
           (!data.keys().hasAny(['currentGameRoundId']) || 
            (data.currentGameRoundId is string && data.currentGameRoundId.size() > 0));
  }
  
  function isValidGameRoundCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['roomId', 'topicContent', 'roundNumber', 'status', 'createdAt']) &&
           data.keys().hasOnly(['roomId', 'topicContent', 'roundNumber', 'status', 'createdAt', 'judgment']) &&
           data.roomId is string &&
           data.roomId.size() > 0 &&
           data.topicContent is string &&
           data.topicContent.size() >= 1 &&
           data.topicContent.size() <= 100 &&
           data.roundNumber is number &&
           data.roundNumber >= 1 &&
           data.roundNumber <= 100 &&
           data.status in ['active', 'completed'] &&
           data.createdAt is timestamp &&
           (!data.keys().hasAny(['judgment']) || 
            (data.judgment is string && data.judgment in ['match', 'no-match']));
  }
  
  function isValidGameRoundUpdate() {
    let data = request.resource.data;
    let existing = resource.data;
    return data.roomId == existing.roomId &&
           data.roundNumber == existing.roundNumber &&
           data.createdAt == existing.createdAt &&
           data.status in ['active', 'completed'] &&
           data.topicContent is string &&
           data.topicContent.size() >= 1 &&
           data.topicContent.size() <= 100 &&
           (!data.keys().hasAny(['judgment']) || 
            (data.judgment is string && data.judgment in ['match', 'no-match']));
  }
  
  function isValidAnswerCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['gameRoundId', 'userId', 'userName', 'content', 'submittedAt']) &&
           data.keys().hasOnly(['gameRoundId', 'userId', 'userName', 'content', 'submittedAt', 'createdAt']) &&
           data.gameRoundId is string &&
           data.gameRoundId.size() > 0 &&
           data.userId is string &&
           data.userId.size() > 0 &&
           data.userName is string &&
           data.userName.size() >= 2 &&
           data.userName.size() <= 20 &&
           data.userName.matches('^[a-zA-Z0-9ぁ-ゖァ-ヾ一-龯０-９]+$') &&
           data.content is string &&
           data.content.size() >= 1 &&
           data.content.size() <= 100 &&
           data.submittedAt is timestamp;
  }
  
  function isValidUserCreation() {
    let data = request.resource.data;
    return data.keys().hasAll(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.keys().hasOnly(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.name is string &&
           data.name.size() >= 2 &&
           data.name.size() <= 20 &&
           data.name.matches('^[a-zA-Z0-9ぁ-ゖァ-ヾ一-龯０-９]+$') &&
           data.isHost is bool &&
           data.roomId is string &&
           data.roomId.size() > 0 &&
           data.joinedAt is timestamp &&
           data.isReady is bool &&
           data.hasAnswered is bool;
  }
  
  function isValidUserUpdate() {
    let data = request.resource.data;
    let existing = resource.data;
    return data.keys().hasAll(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.keys().hasOnly(['name', 'isHost', 'roomId', 'joinedAt', 'isReady', 'hasAnswered']) &&
           data.name == existing.name &&
           data.isHost == existing.isHost &&
           data.roomId == existing.roomId &&
           data.joinedAt == existing.joinedAt &&
           data.isReady is bool &&
           data.hasAnswered is bool;
  }
}