import { render, screen, fireEvent } from '@testing-library/react';
import { RevealingAnswersView } from './RevealingAnswers.component';
import { Room } from '@/types';

jest.mock('./RevealingAnswers.presenter', () => ({
  useRevealingAnswersPresenter: jest.fn(),
}));

// „Ç®„Éï„Çß„ÇØ„ÉàÈñ¢ÈÄ£„ÅÆ„É¢„ÉÉ„ÇØÔºà„ÉÜ„Çπ„Éà„Åó„Å™„ÅÑÔºâ
jest.mock('@/lib/gameEffects', () => ({
  playMatchSound: jest.fn(),
  playNoMatchSound: jest.fn(),
  createConfettiEffect: jest.fn(),
  injectGameAnimations: jest.fn(),
}));

describe('RevealingAnswersView', () => {
  const mockUseRevealingAnswersPresenter = require('./RevealingAnswers.presenter').useRevealingAnswersPresenter;
  
  const defaultPresenterReturn = {
    currentTopicContent: null,
    allAnswers: [],
    hostJudgment: null,
    isHost: false,
    isStartingNextRound: false,
    isEndingGame: false,
    submitJudgment: jest.fn(),
    startNextRound: jest.fn(),
    endGame: jest.fn(),
    judgmentStyle: {
      bgColor: 'bg-gray-50 border-gray-200',
      textColor: 'text-gray-900'
    },
    hasAnimated: false,
  };

  const createMockRoom = (): Room => ({
    id: 'room123',
    code: 'ABC123DEF456GHI789JK',
    status: 'revealing',
    participants: [],
    currentGameRoundId: 'round123',
    createdAt: new Date(),
    expiresAt: new Date(),
  });

  beforeEach(() => {
    jest.clearAllMocks();
    mockUseRevealingAnswersPresenter.mockReturnValue(defaultPresenterReturn);
  });

  describe('Âü∫Êú¨Ë°®Á§∫', () => {
    it('ÂõûÁ≠îÁô∫Ë°®ÁîªÈù¢„ÅÆÂü∫Êú¨Ë¶ÅÁ¥†„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('ÂõûÁ≠îÁô∫Ë°®')).toBeInTheDocument();
      expect(screen.getByText('ÂõûÁ≠îÂÖ¨Èñã‰∏≠')).toBeInTheDocument();
      expect(screen.getByText('„ÅäÈ°å')).toBeInTheDocument();
    });

    it('„ÅäÈ°å„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        currentTopicContent: { content: '„ÉÜ„Çπ„Éà„ÅäÈ°å', round: 2 },
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('„ÅäÈ°å (Á¨¨2„É©„Ç¶„É≥„Éâ)')).toBeInTheDocument();
      expect(screen.getByText('„ÉÜ„Çπ„Éà„ÅäÈ°å')).toBeInTheDocument();
    });

    it('„ÅäÈ°åË™≠„ÅøËæº„Åø‰∏≠„ÅØÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('„ÅäÈ°å„ÇíË™≠„ÅøËæº„Åø‰∏≠...')).toBeInTheDocument();
    });
  });

  describe('ÂõûÁ≠îË°®Á§∫', () => {
    it('ÂèÇÂä†ËÄÖ„ÅÆÂõûÁ≠î„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        allAnswers: [
          { content: 'ÂõûÁ≠î1', userName: '„Éó„É¨„Ç§„É§„Éº1', hasAnswered: true, submittedAt: new Date() },
          { content: 'ÂõûÁ≠î2', userName: '„Éó„É¨„Ç§„É§„Éº2', hasAnswered: true, submittedAt: new Date() },
        ],
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('ÂõûÁ≠î1')).toBeInTheDocument();
      expect(screen.getByText('ÂõûÁ≠î2')).toBeInTheDocument();
      expect(screen.getByText('„Éó„É¨„Ç§„É§„Éº1')).toBeInTheDocument();
      expect(screen.getByText('„Éó„É¨„Ç§„É§„Éº2')).toBeInTheDocument();
    });

    it('Êú™ÂõûÁ≠î„ÅÆÂèÇÂä†ËÄÖ„ÅØÁ©∫„ÅÆÂõûÁ≠î„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        allAnswers: [
          { content: 'ÂõûÁ≠î1', userName: '„Éó„É¨„Ç§„É§„Éº1', hasAnswered: true, submittedAt: new Date() },
          { content: '', userName: '„Éó„É¨„Ç§„É§„Éº2', hasAnswered: false, submittedAt: null },
        ],
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('ÂõûÁ≠î1')).toBeInTheDocument();
      expect(screen.getByText('„Éó„É¨„Ç§„É§„Éº1')).toBeInTheDocument();
      expect(screen.getByText('„Éó„É¨„Ç§„É§„Éº2')).toBeInTheDocument();
      // Á©∫„ÅÆÂõûÁ≠î„ÅØË°®Á§∫„Åï„Çå„Å™„ÅÑ
      expect(screen.queryByText('ÂõûÁ≠î2')).not.toBeInTheDocument();
    });
  });

  describe('Âà§ÂÆöÁµêÊûúË°®Á§∫', () => {
    it('‰∏ÄËá¥Âà§ÂÆöÊôÇ„ÅØÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        hostJudgment: 'match',
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('üéâ‚ú® ÂÖ®Âì°‰∏ÄËá¥ ‚ú®üéâ')).toBeInTheDocument();
    });

    it('‰∏ç‰∏ÄËá¥Âà§ÂÆöÊôÇ„ÅØÂ§±Êïó„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        hostJudgment: 'no-match',
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('üí• ÂÖ®Âì°‰∏ÄËá¥„Å™„Çâ„Åö üí•')).toBeInTheDocument();
    });

    it('Âà§ÂÆöÂâç„ÅØÂà§ÂÆöÁµêÊûú„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.queryByText('üéâ‚ú® ÂÖ®Âì°‰∏ÄËá¥ ‚ú®üéâ')).not.toBeInTheDocument();
      expect(screen.queryByText('üí• ÂÖ®Âì°‰∏ÄËá¥„Å™„Çâ„Åö üí•')).not.toBeInTheDocument();
    });
  });

  describe('„Éõ„Çπ„ÉàÂà§ÂÆöÊ©üËÉΩ', () => {
    it('„Éõ„Çπ„Éà„ÅßÂà§ÂÆöÂâç„ÅØÂà§ÂÆö„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: null,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('ÂõûÁ≠î„ÅÆ‰∏ÄËá¥„ÇíÂà§ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥' })).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥„Å™„Çâ„Åö' })).toBeInTheDocument();
    });

    it('‰∏ÄËá¥„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Presenter„ÅÆsubmitJudgment„ÅåÂëº„Å∞„Çå„Çã', () => {
      const submitJudgment = jest.fn();
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: null,
        submitJudgment,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      const matchButton = screen.getByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥' });
      fireEvent.click(matchButton);

      expect(submitJudgment).toHaveBeenCalledWith('match');
    });

    it('‰∏ç‰∏ÄËá¥„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Presenter„ÅÆsubmitJudgment„ÅåÂëº„Å∞„Çå„Çã', () => {
      const submitJudgment = jest.fn();
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: null,
        submitJudgment,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      const noMatchButton = screen.getByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥„Å™„Çâ„Åö' });
      fireEvent.click(noMatchButton);

      expect(submitJudgment).toHaveBeenCalledWith('no-match');
    });

    it('Âà§ÂÆöÂæå„ÅØÂà§ÂÆö„Éú„Çø„É≥„ÅåÈùûË°®Á§∫„Å´„Å™„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: 'match',
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.queryByText('ÂõûÁ≠î„ÅÆ‰∏ÄËá¥„ÇíÂà§ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).not.toBeInTheDocument();
      expect(screen.queryByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥' })).not.toBeInTheDocument();
      expect(screen.queryByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥„Å™„Çâ„Åö' })).not.toBeInTheDocument();
    });
  });

  describe('Ê¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥ÈÅ∏Êäû', () => {
    it('„Éõ„Çπ„Éà„ÅßÂà§ÂÆöÂæå„ÅØÊ¨°„É©„Ç¶„É≥„Éâ„Éª„Ç≤„Éº„É†ÁµÇ‰∫Ü„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: 'match',
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByRole('button', { name: 'Ê¨°„ÅÆ„É©„Ç¶„É≥„Éâ' })).toBeInTheDocument();
      expect(screen.getByRole('button', { name: '„Ç≤„Éº„É†ÁµÇ‰∫Ü' })).toBeInTheDocument();
    });

    it('Ê¨°„ÅÆ„É©„Ç¶„É≥„Éâ„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Presenter„ÅÆstartNextRound„ÅåÂëº„Å∞„Çå„Çã', () => {
      const startNextRound = jest.fn();
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: 'match',
        startNextRound,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      const nextRoundButton = screen.getByRole('button', { name: 'Ê¨°„ÅÆ„É©„Ç¶„É≥„Éâ' });
      fireEvent.click(nextRoundButton);

      expect(startNextRound).toHaveBeenCalled();
    });

    it('„Ç≤„Éº„É†ÁµÇ‰∫Ü„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Presenter„ÅÆendGame„ÅåÂëº„Å∞„Çå„Çã', () => {
      const endGame = jest.fn();
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: 'match',
        endGame,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      const endGameButton = screen.getByRole('button', { name: '„Ç≤„Éº„É†ÁµÇ‰∫Ü' });
      fireEvent.click(endGameButton);

      expect(endGame).toHaveBeenCalled();
    });

    it('Ê¨°„É©„Ç¶„É≥„ÉâÈñãÂßã‰∏≠„ÅØ„Éú„Çø„É≥„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: 'match',
        isStartingNextRound: true,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByRole('button', { name: 'ÈñãÂßã‰∏≠...' })).toBeDisabled();
    });

    it('„Ç≤„Éº„É†ÁµÇ‰∫Ü‰∏≠„ÅØ„Éú„Çø„É≥„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: true,
        hostJudgment: 'match',
        isEndingGame: true,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByRole('button', { name: 'ÁµÇ‰∫Ü‰∏≠...' })).toBeDisabled();
    });
  });

  describe('„Ç≤„Çπ„ÉàË°®Á§∫', () => {
    it('„Ç≤„Çπ„Éà„ÅÆÂ†¥Âêà„ÅØÂæÖÊ©ü„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseRevealingAnswersPresenter.mockReturnValue({
        ...defaultPresenterReturn,
        isHost: false,
      });

      const room = createMockRoom();
      render(<RevealingAnswersView room={room} currentUserId="user1" />);

      expect(screen.getByText('‰∏ªÂÇ¨ËÄÖ„ÅåÊ¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åô„Çã„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument();
      expect(screen.queryByRole('button', { name: 'ÂÖ®Âì°‰∏ÄËá¥' })).not.toBeInTheDocument();
      expect(screen.queryByRole('button', { name: 'Ê¨°„ÅÆ„É©„Ç¶„É≥„Éâ' })).not.toBeInTheDocument();
    });
  });
});